Structure of message:<P><ul><P><li>The message consists of a sequence of statements that can be
evaluated, and each statement evaluates to true.<P><P><li>The message can refer to and change its own syntax.<P><P><li>A core set of operators are introduced by showing examples 
of their use.<P><P><LI>Once a sufficient set of operators is available, most new concepts
are introduced both by examples and a definition in terms of what is
already known.<P><P><LI>The message is more like a programming language than a human
language, and is related to Brian McConnell's notion of
<A HREF=http://www.oreilly.com/news/seti_0201.html>ACETI</A>.  The goal is to
transmit simulations whose behavior can be examined and discussed, and
to introduce higher-level notions in terms of those simulations. <P><P></ul><P>The advantage of using a programming-code-like language is that
the reader can play with hypothethicals at any time, and 
experiment with evaluating alternative statements that are not in the
message.<P>The generated message currently consists of a sequence of 4 symbols.<P><PRE>
  number   symbol   meaning
    0         .     binary digit zero
    1         :     binary digit one
    2         (     marks beginning of an expression
    3         )     marks end of an expression
</PRE><P>And two pseudo-symbols coded using the above:<P><PRE>
  sequence  symbol   meaning
    .()        /     opens an implicit paren, which will close at next paren
                     (A B / C / D) is another way to write (A B (C (D)))
                     This greatly simplifies complex expressions.
    (())       ;     marks end of sentence
</PRE><P>Numbers are encoded as binary digits between parentheses, e.g.  (:::.)
is 1110 base 2 which is 14 in decimal.  A set of numbers between
parentheses constitutes an expression.  Expressions can be nested.
Expressions followed by a semicolon should evaluate to be true, once
the rules for evaluation have been introduced.<P>In the human-readable form of the message, decimal numbers can be
used.  There are converted to binary.  Identifiers can also be
used.  Identifiers are mapped onto arbitrarily assigned numbers.
In the message, there is nothing to distinguish identifiers from 
numbers.  The actual language is carefully constructed so that
this distinction is never necessary.<P>Here are the operations currently introduced in the message by
example alone, rather than by definition.<P><ul>
<li>equals, greater than, less than, not
<li>addition, multiplication, subtraction, (division)
<li>assign, define, "?", "number?"
<li>make-cell, set!, get!
<li>primer
<li>translate
</ul><P>I'm gradually reducing this set.  There are some obvious redundancies
that could be removed quite easily right now, but with a cost to
comprehension.<P>